# 工作流的名称，用于在 GitHub Actions 界面中显示
name: Export ARM Template

# 定义触发工作流的事件
on:
  push:
    branches:
      - main  # 只有当代码推送到 main 分支时，才会触发此工作流
              # 如果需要其他分支，可以修改为其他分支名称或使用通配符

# 定义工作流中的作业
jobs:
  build:  # 作业的名称，可以自定义
    runs-on: ubuntu-latest  # 指定运行作业的操作系统环境，这里使用最新的 Ubuntu 系统

    steps:  # 定义作业中的各个步骤
      - name: Checkout repository  # 步骤名称，用于在日志中显示
        uses: actions/checkout@v3  # 使用 GitHub Actions 的 checkout 动作
                                   # 作用：将代码仓库的内容检出到工作环境中

      - name: Setup Node.js environment  # 设置 Node.js 环境
        uses: actions/setup-node@v3.4.1  # 使用 GitHub Actions 的 setup-node 动作
        with:  # 传递给动作的参数
          node-version: 18.x  # 指定 Node.js 的版本
                              # 这里使用 18.x，18以下不支持

      - name: Install dependencies  # 安装依赖
        run: npm install  # 执行 npm install 命令安装项目依赖
        working-directory: ./  # 指定命令运行的工作目录
                               # 如果项目在子目录中，需要修改为对应的路径

      - name: Export ARM Template  # 导出 ARM 模板
        run: |  # 使用多行命令
          npm run build ${{github.workspace}}/ /subscriptions${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups${{ secrets.AZURE_RESOURCE_GROUP }}/providers/Microsoft.DataFactory/factories/${{ secrets.ADF_NAME }} "ExportedArmTemplate"  # 指定导出的 ARM 模板文件夹名称
        working-directory: ./  # 指定命令运行的工作目录
                               # 如果 npm 脚本在子目录中，需要修改为对应的路径

      - name: Upload ARM Template Artifact  # 上传 ARM 模板作为构建产物
        uses: actions/upload-artifact@v3  # 使用 GitHub Actions 的 upload-artifact 动作
        with:  # 传递给动作的参数
          name: ExportedArmTemplate  # 构建产物的名称
          path: ./ExportedArmTemplate  # 构建产物的路径
                                       # 这里假设 ARM 模板被导出到当前目录下的 ExportedArmTemplate 文件夹
